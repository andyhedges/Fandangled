<?xml version="1.0"?>
<#--
   Copyright 2010 Andy Hedges <andy@hedges.net>

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<!-- Generated by Fandangled https://github.com/andyhedges/Fandangled -->
 <#assign
 	primitives = {	"boolean":"xsd:boolean",
 					"byte":"xsd:byte",
 					"short":"xsd:short",
 					"int":"xsd:integer",
 					"long":"xsd:integer",
 					"float":"xsd:float",
 					"double":"xsd:double",
 					"string":"xsd:string",
 					"datetime":"xsd:dateTime"}
 	
 	>
 	<#if interface.namespacePrefix??>
 	<#assign nsp = '${interface.namespacePrefix?lower_case}.'/>
 	<#else>
 	<#assign nsp = ''/>
 	</#if>

<#if !xsdOnly>
<wsdl:definitions name="${interface.name}"
  targetNamespace="http://${nsp}${interface.organisationDomainName?lower_case}/${interface.serviceName}/${interface.name}-${interface.version.value}"
  xmlns:tns="http://${nsp}${interface.organisationDomainName?lower_case}/${interface.serviceName}/${interface.name}-${interface.version.value}"
  xmlns:domain="http://${nsp}${interface.organisationDomainName?lower_case}/domain/${interface.serviceName}/${interface.name}-${interface.version.value}"
  xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
  xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/">
  
	  <wsdl:types>
</#if>
	      <xsd:schema targetNamespace="http://${nsp}${interface.organisationDomainName?lower_case}/domain/${interface.serviceName}/${interface.name}-${interface.version.value}"
	        xmlns="http://${nsp}${interface.organisationDomainName?lower_case}/domain/${interface.serviceName}/${interface.name}-${interface.version.value}"
	        xmlns:xsd="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">
	      
		      <#list interface.types as type>
					<xsd:complexType name="${type.name}">
						<xsd:sequence>
						<#list type.parameters as parameter>
							<@typeMac typeInfo=parameter.typeInfo name=parameter.name mandatory=parameter.mandatory  many=false/>
						</#list>
						</xsd:sequence>
					</xsd:complexType>
			  </#list>
			  
			  <#list interface.enumerations as enumeration>
					<xsd:simpleType name="${enumeration.name}">
						<xsd:restriction base="xsd:string">
							<#list enumeration.values as value>
								<xsd:enumeration value="${value.name}"/>
							</#list>
						</xsd:restriction>
					</xsd:simpleType>
			  </#list>

			<#list interface.operations as operation>
				<#if operation.parameters?has_content>
				<xsd:element name="${operation.name?cap_first}In">
				    <xsd:complexType>
                        <xsd:sequence>
                            <#list operation.parameters as parameter>
                                <@typeMac typeInfo=parameter.typeInfo name=parameter.name mandatory=parameter.mandatory many=false/>
                            </#list>
                        </xsd:sequence>
					</xsd:complexType>
				</xsd:element>
				</#if>
				<#if operation.return?? && operation.return.typeInfo.name != "void">
					<xsd:element name="${operation.name?cap_first}Out">
					    <xsd:complexType>
                            <xsd:sequence>
                                <@typeMac typeInfo=operation.return.typeInfo name="return" mandatory=true many=false/>
                            </xsd:sequence>
						</xsd:complexType>
					</xsd:element>
				</#if>
			</#list>

			<#list interface.exceptions as exception>
				<xsd:element name="${exception.name?cap_first}Fault">
					<xsd:complexType>
						<xsd:sequence>
							<#list exception.parameters as parameter>
								<xsd:sequence>
									<@typeMac typeInfo=parameter.typeInfo name=parameter.name  mandatory=parameter.mandatory many=false/>
								</xsd:sequence>
							</#list>
						</xsd:sequence>
					</xsd:complexType>
				</xsd:element>
			</#list>

			<#list interface.events as event>
				<xsd:element name="${event.name?cap_first}">
					<xsd:complexType>
						<xsd:sequence>
							<#list event.parameters as parameter>
								<xsd:sequence>
									<@typeMac typeInfo=parameter.typeInfo name=parameter.name  mandatory=parameter.mandatory many=false/>
								</xsd:sequence>
							</#list>
						</xsd:sequence>
					</xsd:complexType>
				</xsd:element>
			</#list>
			
			<xsd:element name="empty"/>
	      
	      </xsd:schema>
<#if !xsdOnly>
	  </wsdl:types>
	  
	  <#list interface.operations as operation>
			<#if operation.parameters?has_content>
				<wsdl:message name="${operation.name?cap_first}Request">
					<wsdl:part name="request" element="domain:${operation.name?cap_first}In"/>
				</wsdl:message>
			<#else>
				<wsdl:message name="${operation.name?cap_first}Request">
					<wsdl:part name="request" element="domain:empty"/>
				</wsdl:message>
			</#if>
			
			<#if operation.return?? && operation.return.typeInfo.name != "void">
				<wsdl:message name="${operation.name?cap_first}Response">
					<wsdl:part name="response" element="domain:${operation.name?cap_first}Out"/>
				</wsdl:message>
			<#else>
				<wsdl:message name="${operation.name?cap_first}Response">
					<wsdl:part name="response" element="domain:empty"/>
				</wsdl:message>
			</#if>
			
			<#list operation.exceptions as exception>
				<wsdl:message name="${exception.typeName?cap_first}Fault">
					<wsdl:part name="fault${exception.typeName?cap_first}" element="domain:${exception.typeName?cap_first}Fault"/>
				</wsdl:message>	
			</#list>	
	  </#list>
	  
	 <wsdl:portType name="${interface.name}PortType">
	  	<#list interface.operations as operation>
	  		<wsdl:operation name="${operation.name}">
				<wsdl:input message="tns:${operation.name?cap_first}Request"/>
				<wsdl:output message="tns:${operation.name?cap_first}Response"/>
				<#list operation.exceptions as exception>
					<wsdl:fault name="${exception.typeName?uncap_first}Fault" message="tns:${exception.typeName?cap_first}Fault"/>
				</#list>
			</wsdl:operation>
	  	</#list>	
	 </wsdl:portType>
	 
	 <wsdl:binding name="${interface.name}Binding" type="tns:${interface.name}PortType">
	 	<soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
	  	<#list interface.operations as operation>
	  		<wsdl:operation name="${operation.name}">
				<soap:operation soapAction="http://${nsp}${interface.organisationDomainName?lower_case}/${interface.serviceName}/${interface.name}/${operation.name}-${interface.version.value}"/>
				<wsdl:input>
					<soap:body use="literal"/>
				</wsdl:input>
				<wsdl:output>
					<soap:body use="literal"/>
				</wsdl:output>
				<#list operation.exceptions as exception>
					<wsdl:fault name="${exception.typeName?uncap_first}Fault"/>
				</#list>
			</wsdl:operation>
	  	</#list>	 
	 </wsdl:binding>
	 
	 <wsdl:service name="${interface.name}ServiceInterface">
	 	<wsdl:documentation>${interface.description}</wsdl:documentation>
	 	<wsdl:port name="${interface.name}Port" binding="tns:${interface.name}Binding">
	 		<soap:address location="http://set/this/programmatically"/>
	 	</wsdl:port>
	 </wsdl:service>
   
  </wsdl:definitions>
 </#if>
 
 <#macro typeMac typeInfo name mandatory many>
	<#if typeInfo.class.simpleName == "TypeInfo">
	    <#-- single type -->
		<xsd:element name="${name}" type="${primitives[typeInfo.typeName]!typeInfo.typeName}" <@cardinality mandatory many/>/>
	<#elseif typeInfo.class.simpleName == "CollectionInfo">
	    <#-- collection -->
        <xsd:element name="${name}" <@cardinality mandatory false/>>
            <xsd:complexType>
                <xsd:sequence>
                    <@typeMac typeInfo=typeInfo.containedTypeInfo name="item" mandatory=false many=true/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
	<#elseif typeInfo.class.simpleName == "MapInfo">
		<#-- map -->
		<xsd:element name="${name}" <@cardinality mandatory true/>>
            <xsd:complexType>
                <xsd:sequence>
                    <@typeMac typeInfo=typeInfo.containedNameTypeInfo name="name" mandatory=false many=false/>
                    <@typeMac typeInfo=typeInfo.containedValueTypeInfo name="value" mandatory=false many=false/>
                </xsd:sequence>
            </xsd:complexType>
		</xsd:element>
	</#if>
 	
 </#macro>

 <#macro cardinality mandatory many>
    <#if mandatory?? && mandatory>
        minOccurs="1" nillable="false"
    <#else>
        minOccurs="0" nillable="true"
    </#if>
    <#if many?? && many>
        maxOccurs="unbounded"
    <#else>
        maxOccurs="1"
    </#if>
 </#macro>